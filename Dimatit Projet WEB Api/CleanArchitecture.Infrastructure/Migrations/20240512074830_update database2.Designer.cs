// <auto-generated />
using System;
using CleanArchitecture.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CleanArchitecture.Infrastructure.Migrations
{
    [DbContext(typeof(BlogDbContext))]
    [Migration("20240512074830_update database2")]
    partial class updatedatabase2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("blog");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Code_Analytique", b =>
                {
                    b.Property<int>("ID_Analytique")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Analytique"));

                    b.Property<string>("Activite_Service")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeAnalytique")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_Analytique");

                    b.ToTable("code_Analytique");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Frais_Deplacement", b =>
                {
                    b.Property<int?>("ID_Frais")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ID_Frais"));

                    b.Property<string>("Circulation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date_Avancement")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date_Preparation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date_Regelement")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date_Saisie")
                        .HasColumnType("datetime2");

                    b.Property<float?>("FraisDeplacement")
                        .HasColumnType("real");

                    b.Property<float?>("Frais_Kilometrique")
                        .HasColumnType("real");

                    b.Property<string>("Mat_PER")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mode_Reglement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Montant_Avance")
                        .HasColumnType("real");

                    b.Property<DateTime?>("Periode")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Periode_De")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Periode_Deplacement")
                        .HasColumnType("datetime2");

                    b.Property<int>("Personnel_id")
                        .HasColumnType("int");

                    b.Property<string>("Reprise_Frais")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ville_Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_Frais");

                    b.ToTable("frais_Deplacement");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Personnel", b =>
                {
                    b.Property<int>("ID_Personnel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Personnel"));

                    b.Property<string>("Activite_Service")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Analytique_id")
                        .HasColumnType("int");

                    b.Property<string>("Matricule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_Personnel");

                    b.ToTable("personnel");
                });
#pragma warning restore 612, 618
        }
    }
}
